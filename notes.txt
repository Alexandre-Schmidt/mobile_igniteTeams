####criar projeto
npx create-expo-app -t expo-template-blank-typescript
##################################

###Executar
npm run android
##################################

###Imagens
usar a nomeclatura img@2x.png, img@3x.png .... ajuda na renderização com isso carrega a 
Imagens mais adequada para o dispositivo 
##################################

###importações dinamica (Path Mapping)
ele ajuda na hora de importar, não fica muito extenso o caminho e deixa mais flexivel
npm install --save-dev babel-plugin-module-resolver

--> configurar o alias no babel.config.js:
 plugins: [
      [
        "module-resolver", 
        {
        root: ["./src"],
        alias: {
          "@assets": "./src/assets",
          "@components": "./src/components",
          "@routes": "./src/routes",
          "@screens": "./src/screens",
          "@storage": "./src/storage",
          "@theme": "./src/theme",
          "@utils": "./src/utils"
        },
      },
    ],
    ],

--> Configurar o tsconfig.json para aparecer nas sugestões quando for importar
"baseUrl": "./",
    "paths": {
      "@assets/*": [
        "./src/assets/*"
      ],
      "@components/*": [
        "./src/components/*"
      ],
      "@routes/*": [
        "./src/routes/*"
      ],
      "@screens/*": [
        "./src/screens/*"
      ],
      "@storage/*": [
        "./src/storage/*"
      ],
      "@theme/*": [
        "./src/theme/*"
      ],
      "@utils/*": [
        "./src/utils/*"
      ]
    }
  }
  ##################################

###Styled Components
  npm i styled-components
  npm i --save-dev @types/styled-components @types/styled-components-react-native
##################################

### Alias de Importação: para não ficar varias importações no cabeçalho 
import * as S from './styles';

export function Groups() {
  return (
    <S.Container>
      <S.Text>Groups</S.Text>
    </S.Container>
  );
}
##################################

### Definindo o theme
-->cria a pasta theme/index.ts
-->no app.tsx importa o: import { ThemeProvider } from 'styled-components';
e envolve ela em toda aplicação:
  <ThemeProvider theme={theme}>
    <Groups />
  </ThemeProvider>
--> criar a tipagem para aparecer como sugestões: cria uma pasta @types dentro da src 
cria o arquivo styled.d.ts 
--> para usar: background-color: ${({theme}) => theme.COLORS.GRAY_600 };
##################################

### Instalar fontes
npx expo install expo-font @expo-google-fonts/NOME_DA_FONTE
--> importar no app e fazer a verificação se carregou as fontes
const [fontsLoaded] = useFonts({
    Roboto_400Regular,
    Roboto_700Bold
  });

{fontsLoaded ? <Groups /> : <Loading />}
##################################

### Estilizando a StatusBar
no app import {StatusBar} from "react-native"
<StatusBar barStyle="light-content" backgroundColor="transparent" translucent />
##################################

### importar imagem
import logoImg from '@assets/logo.png';
--> no @types criar um arquivo de tipagem para a imagem
declare module '*.png';
##################################

### importar icons
npm install --save phosphor-react-native
--> para usar, instalar o:
npx expo install react-native-svg
--> basta usar:
import { CaretLeft } from 'phosphor-react-native';
<CaretLeft color="#FFF" size={32}/>
##################################

### Para estilizar um components que não é padrão (View, Text ...), algo externo (incons..):
export const BackIcon = styled(CaretLeft).attrs(({ theme }) => ({
  size: 36,
  color: theme.COLORS.WHITE
}))``;
##################################

### Utilizando o CSS Helper para refatorar(enxugar) o codigo:
exemplo: o ${({ theme }) aparece 3 vezes 
export const Title = styled.Text`
  font-size: ${({ theme }) => theme.FONT_SIZE.MD}px;
  color: ${({ theme }) => theme.COLORS.WHITE};
  font-family: ${({ theme }) => theme.FONT_FAMILY.BOLD};
`;

--> importar o css: import styled , {css} from "styled-components/native";
ficando assim:
export const Title = styled.Text`
  ${({ theme }) => css`
    font-size: ${theme.FONT_SIZE.MD}px;
    color: ${theme.COLORS.WHITE};
    font-family: ${theme.FONT_FAMILY.BOLD};
  `}
`;
##################################

### Adicionar icones
documentação:
https://github.com/oblador/react-native-vector-icons
visualizar os icones:
https://oblador.github.io/react-native-vector-icons/

importar o MaterialIcons por exemplo: import { MaterialIcons } from '@expo/vector-icons'
uso: 
<MaterialIcons
  name="home" //aqui que passa o nome do icone
  color="#fff"
  size={32}
/>
##################################

### Tipos de Navegação 
https://reactnavigation.org/

npm install @react-navigation/native

dependencias: Precisa instalar tbm
npx expo install react-native-screens react-native-safe-area-context

tipos:
--> StackNavigator: as telas são empilhadas umas sobre as outras. Quando você 
navega para uma nova tela, ela é empilhada no topo da pilha, e você pode voltar 
para a tela anterior removendo-a do topo da pilha
    npm install @react-navigation/native-stack

--> Tab Navigator: é utilizado para criar uma navegação baseada em abas na 
parte inferior ou superior da tela. Cada aba representa uma tela ou um conjunto 
de telas relacionadas.
    npm install @react-navigation/bottom-tabs

--> Drawer Navigator: cria um menu lateral que você pode deslizar para dentro e 
para fora da tela. Isso é útil para navegação lateral em telas.
    npm install @react-navigation/drawer
##################################

### criar as rotas da aplicação usando o StackNavigator
-->criar a pasta routes com os arquivos:
    app.routes.tsx
    index.tsx (aqui define o contexto da navegação. Para todo mundo acessar )
-->No app.tsx:
-->importar no App.tsx
    import { Routes } from "./src/routes";
-->Tipar as rotas para aparecer como sugestão na hora de usar
  -->no @types criar o arquivo navigation.d.ts
--> para usar:
  --> import {useNavigation} from "@react-navigation/native"
  --> const navigation = useNavigation();
  --> navigation.navigate("PaginaQSeraDirecionada")
ou
  --> import {NativeStackNavigationProp} from "@react-navigation/native-stack"
  --> criar a tipagem
      type RootParamList = {
        groups: undefined;
        new: undefined;
        players: {
          group: string;
        }
      }

      type Props = {
        navigation: NativeStackNavigationProp<RootParamList, 'groups'>
      }
        --> < RootParamList é a tipagem da rota , 'groups' é pagina que vc ta >
  --> passa como parametro para o componente o navigation ex: export function Component({navigation}: Props) {....
  --> navigation.navigate("PaginaQSeraDirecionada")
##################################

### Implementar o botão voltar
--> importar
import { useNavigation } from "@react-navigation/native";
const navigation = useNavigation();

--> usar para voltar uma tela
function handleGoBack(){
    navigation.goBack();
  }

ou

--> voltar para pagina especifica
function handleGoBack(){
    navigation.navigate('home');
  }
##################################

### Prevenindo Glitch na navegação
Glitch é aquela tela branca que da quando passa de uma pagina para outra

--> no index do routes envolver com uma View:
export function Routes(){

  const { COLORS } = useTheme();

  return(
    <View style={{ flex: 1, backgroundColor: COLORS.GRAY_600 }}>
      <NavigationContainer>
        <AppRoutes />
      </NavigationContainer>
    </View>
  );
}

##################################

###SafeAreaView
usado para criar uma area segura em que a camera ou outros componentes que ficam na tela
atrapalhe a visualização da tela

--> instalar
npm install react-native-safe-area-context

--> no lugar da View coloca o SafeAreaView
import {SafeAreaView} from 'react-native-safe-area-context'
import styled from 'styled-components/native';

export const Container = styled(SafeAreaView)`
  flex: 1;
  background-color: ${({ theme }) => theme.COLORS.GRAY_600};
  padding: 24px;
`;
##################################

###Prop Drilling
é quando precisamos passar algo para um componente mas para isso tem que passar 
por varias camadas de filhos até chegar onde vc quer (do passa para o filho e filho para o filho ...)

resolução: centralizar em local para consulta como localStorage
##################################

###Async Storage
é um sistema de armazenamento de chave-valor, assincrono e persistente. Salva em formato de texto.

--> instalar
npx expo install @react-native-async-storage/async-storage

--> importar
import AsyncStorage from '@react-native-async-storage/async-storage';

--> usar
try {
    await AsyncStorage.setItem(GROUP_COLLECTION, newGroup); //primeiro parametro é chave e o segundo valor
  } catch (error) {
    throw error;
  }
##################################